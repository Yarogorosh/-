import tkinter as tk
from tkinter import ttk, messagebox
import tkintermapview
import requests
import psycopg2
from geopy.geocoders import Nominatim

class WeatherMapApp:
    def __init__(self):
        self.API_KEY = "5c89ae4c35b8e833d0a4bb3a4dfdaedd"
        self.BASE_URL = "https://api.openweathermap.org/data/2.5/weather"
        self.conn = self.connection_BD()
        self.cursor = self.conn.cursor()
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS auth_table (
            id SERIAL PRIMARY KEY,
            login TEXT UNIQUE,
            password TEXT);''')
        self.geolocator = Nominatim(user_agent="WeatherMapApp")
        self.authorization1()

    def connection_BD(self):
        connection = psycopg2.connect(user="postgres",
                                      dbname="2IS_Zelenov",
                                      password="Buhjvfybz123!",
                                      host="45.152.112.235",
                                      port="5432")
        connection.autocommit = True
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        return connection

    def authorization1(self):
        self.authorization = tk.Tk()
        self.authorization.title("–í—Ö–æ–¥")
        self.authorization.geometry("300x300")
        self.authorization.resizable(width=False, height=False)

        label = ttk.Label(self.authorization, text="–í—Ö–æ–¥")
        label.place(x=135, y=50)

        btn8 = ttk.Button(self.authorization, text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", command=self.auth)
        btn8.place(x=10, y=150, width=120, height=100)

        btn9 = ttk.Button(self.authorization, text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", command=self.reg)
        btn9.place(x=170, y=150, width=120, height=100)

        self.authorization.mainloop()

    def auth(self):
        self.auth_window = tk.Tk()
        self.auth_window.title("–í—Ö–æ–¥")
        self.auth_window.geometry("400x400")
        self.auth_window.resizable(width=False, height=False)

        label = ttk.Label(self.auth_window, text="–õ–æ–≥–∏–Ω")
        label.place(x=135, y=70)
        self.login_entry = ttk.Entry(self.auth_window)
        self.login_entry.place(x=135, y=90)

        label = ttk.Label(self.auth_window, text="–ü–∞—Ä–æ–ª—å")
        label.place(x=135, y=160)
        self.password_entry = ttk.Entry(self.auth_window)
        self.password_entry.place(x=135, y=180)

        def auth_button():
            password = self.password_entry.get()
            login = self.login_entry.get()
            self.cursor.execute("SELECT * FROM auth_table WHERE login=%s AND password=%s", (login, password))
            result = self.cursor.fetchall()
            if result:
                self.authorization.destroy()
                self.auth_window.destroy()
                self.main_TK()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

        btn10 = ttk.Button(self.auth_window, text="–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", command=auth_button)
        btn10.place(x=135, y=270, width=130, height=60)

        self.auth_window.mainloop()

    def reg(self):
        self.reg_window = tk.Tk()
        self.reg_window.title("–í—Ö–æ–¥")
        self.reg_window.geometry("400x400")
        self.reg_window.resizable(width=False, height=False)

        label = ttk.Label(self.reg_window, text="–õ–æ–≥–∏–Ω")
        label.place(x=135, y=70)
        self.login_entry_reg = ttk.Entry(self.reg_window)
        self.login_entry_reg.place(x=135, y=90)

        label = ttk.Label(self.reg_window, text="–ü–∞—Ä–æ–ª—å")
        label.place(x=135, y=160)
        self.password_entry_reg = ttk.Entry(self.reg_window)
        self.password_entry_reg.place(x=135, y=180)

        def reg_button():
            password = self.password_entry_reg.get()
            login = self.login_entry_reg.get()
            try:
                self.cursor.execute("INSERT INTO auth_table (login, password) VALUES (%s, %s)", (login, password))
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
                self.reg_window.destroy()
            except psycopg2.IntegrityError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        btn9 = ttk.Button(self.reg_window, text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", command=reg_button)
        btn9.place(x=135, y=270, width=130, height=60)

        self.reg_window.mainloop()

    def main_TK(self):
        self.root = tk.Tk()
        self.root.title("Google Maps")
        self.root.geometry("800x700")

        self.map_widget = tkintermapview.TkinterMapView(
            self.root, width=800, height=550, corner_radius=0
        )
        self.map_widget.pack(fill="both", expand=True)

        self.map_widget.set_position(55.7558, 37.6176)
        self.map_widget.set_zoom(10)

        self.map_widget.add_left_click_map_command(self.get_weather_for_click)

        control_frame = tk.Frame(self.root)
        control_frame.pack(fill="x", padx=5, pady=5)

        self.coordinate_label = tk.Label(control_frame, text="–ü–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º:")
        self.coordinate_label.pack(side="left", padx=5)

        self.search_entry = tk.Entry(control_frame, width=40)
        self.search_entry.pack(side="left", padx=5)

        address_frame = tk.Frame(self.root)
        address_frame.pack(fill="x", padx=5, pady=5)
        tk.Label(address_frame, text="–ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É:").pack(side="left", padx=5)

        self.address_entry = tk.Entry(address_frame, width=40)
        self.address_entry.pack(side="left", padx=5)
        tk.Button(address_frame, text="–ò—Å–∫–∞—Ç—å –∞–¥—Ä–µ—Å", command=self.search_by_address).pack(side="left", padx=5)

        tk.Button(
            control_frame,
            text="–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ",
            command=self.show_saved_locations
        ).pack(side="right", padx=5)

        tk.Button(
            control_frame,
            text="–ü–æ–∏—Å–∫",
            command=self.search_location
        ).pack(side="left", padx=5)

        tk.Button(
            control_frame,
            text="–û—á–∏—Å—Ç–∏—Ç—å –º–µ—Ç–∫–∏",
            command=self.delete_all_markers
        ).pack(side="right", padx=5)

        country_frame = tk.Frame(self.root)
        country_frame.pack(fill="x", padx=5, pady=5)

        tk.Label(country_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:").pack(side="left", padx=5)

        self.countries = {
            "–†–æ—Å—Å–∏—è": (55.7558, 37.6176),
            "–°–®–ê": (37.0902, -95.7129),
            "–ö–∏—Ç–∞–π": (35.8617, 104.1954),
            "–ò–Ω–¥–∏—è": (20.5937, 78.9629),
            "–§—Ä–∞–Ω—Ü–∏—è": (46.6034, 1.8883),
            "–ì–µ—Ä–º–∞–Ω–∏—è": (51.1657, 10.4515),
            "–Ø–ø–æ–Ω–∏—è": (36.2048, 138.2529),
        }

        self.country_combobox = ttk.Combobox(
            country_frame,
            values=list(self.countries.keys()),
            state="readonly"
        )
        self.country_combobox.pack(side="left", padx=5)

        tk.Button(
            country_frame,
            text="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å",
            command=self.move_to_country
        ).pack(side="left", padx=5)

        self.root.mainloop()

    def get_weather_data(self, lat, lon):
        params = {
            "lat": lat,
            "lon": lon,
            "appid": self.API_KEY,
            "units": "metric",
            "lang": "ru"
        }

        try:
            response = requests.get(self.BASE_URL, params=params)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {str(e)}")
            return None

    def show_weather_info(self, weather_data):
        if not weather_data:
            return

        info = (
            f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {weather_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['main']['temp']}¬∞C\n"
            f"üßä –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather_data['main']['feels_like']}¬∞C\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['main']['humidity']}%\n"
            f"üå¨ –í–µ—Ç–µ—Ä: {weather_data['wind']['speed']} –º/—Å\n"
            f"‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {weather_data['clouds']['all']}%\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {weather_data['weather'][0]['description'].capitalize()}"
        )

        messagebox.showinfo("–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è", info)

    def get_weather_for_click(self, coords):
        lat, lon = coords
        weather_data = self.get_weather_data(lat, lon)

        if weather_data:
            self.map_widget.set_marker(lat, lon, text="üìç –ü–æ–≥–æ–¥–∞")
            self.show_weather_info(weather_data)

    def search_location(self):
        query = self.search_entry.get()

        if not query:
            return

        try:
            if "," in query:
                lat, lon = map(float, query.split(","))
                self.map_widget.set_position(lat, lon)
            else:
                self.map_widget.set_address(query)

            self.map_widget.set_zoom(18)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")

    def delete_all_markers(self):
        self.map_widget.delete_all_marker()

    def move_to_country(self):
        selected_country = self.country_combobox.get()

        if selected_country in self.countries:
            lat, lon = self.countries[selected_country]
            self.map_widget.set_position(lat, lon)
            self.map_widget.set_zoom(10)

    def save_location_to_db(self, lat, lon):
        try:
            self.cursor.execute("INSERT INTO saved_locations (latitude, longitude) VALUES (%s, %s)", (lat, lon))
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {str(e)}")

    def get_weather_for_click(self, coords):
        lat, lon = coords
        weather_data = self.get_weather_data(lat, lon)

        if weather_data:
            self.map_widget.set_marker(lat, lon, text="üìç –ü–æ–≥–æ–¥–∞")
            self.show_weather_info(weather_data)

            if messagebox.askyesno("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å?", "–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ?"):
                self.save_location_to_db(lat, lon)

    def show_saved_locations(self):
        try:
            self.cursor.execute("SELECT latitude, longitude FROM saved_locations")
            locations = self.cursor.fetchall()

            for lat, lon in locations:
                self.map_widget.set_marker(lat, lon, text="üìç –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")

            messagebox.showinfo("–£—Å–ø–µ—Ö", "–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {str(e)}")

    def search_by_address(self):
        address = self.address_entry.get()
        try:
            location = self.geolocator.geocode(address)
            if location:
                self.map_widget.set_position(location.latitude, location.longitude)
                self.map_widget.set_zoom(18)
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

WeatherMapApp()
